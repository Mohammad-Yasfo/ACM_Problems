/*
سعيد بساطة ملك الفراطة (مسألة أولمبياد عالمي)
سعيد بساطة لديه هواية جمع الفراطة، لذلك دائما تراه يحمل في جيبه 5 ليرات و 10 و 20 و 50، وعندما يريد أن يدفع أي مبلغ لزبائنه فهو يختار الفراطة المناسبة، بحيث يدفع أقل عدد ممكن من القطع، لأنه دائما يريد أن يبقى لديه الكثير من القطع النقدية.
الكثير من الناس يعتقدون أنها موهبة منذ الولادة، وآخرون يعتقدون أنه سقط على رأسه عندما كان صغيرا، ولكن لا أحد يعرف ما هي الطريقة التي يتبعها.
مهمتك هي كتابة برنامج يقوم بقراءة القطع النقدية في جيب سعيد والمبلغ الذي يريد أن يدفعه، ومن ثم يحسب ما هي القطع النقدية التي يجب انفاقها بحيث يفقد سعيد أقل عدد ممكن من القطع النقدية التي بحوزته.
أيضا البرنامج يعرف فيما إذا كان سعيد يملك المبلغ الذي عليه دفعه أم لا.

الدخل
الدخل يتكون من سطر واحد من الأرقام ( أول أربعة أرقام هي عدد القطع المعدنية من فئة 5 ثم 10 ثم 20 ثم 50 على التتالي ) والرقم الخامس هو عدد Integer يمثل المبلغ الذي عليه أن يدفعه بائع البطاطا، أرقام القطع المعدنية يجب أن تكون بين 1 و 1,000,000 أما المبلغ المدفوع يجب أن يكون أقل من 100,000,000
مثلا :
إذا كانت لديه قطعتين من كل فئة عملة معدنية وكان عليه أن يدفع 35 ليرة فسيكون الدخل على الشكل التالي
2 2 2 2 35
إذا كانت لديه 3 قطع من فئة 5 ليرات، و قطعتان من فئة 10 و 4 قطع من فئة 50 ليرة وعليه أن يدفع 535 ليرة فسيكون الدخل على الشكل التالي
3 2 0 4 535
الخرج
سيكون خرج البرنامج عبارة عن عدد كل فئة من فئة العملات التي عليه انفاقها بحيث يخسر أقل عدد ممكن من العملات، مع مجموع الكلي للقطع التي خسرها، ( المجموع الكلي يجب أن يكون أقل ما يمكن حتى يستطيع ملك الفراطة الاحتفاظ بأكبر عدد من العملات ).
في المثال الأول سابقا أقل عدد ممكن من العملات هو 3 ( واحدة من فئة ال 5 وواحدة من فئة ال 10 وواحدة من فئة ال 20 ) الناتج هو 35 المبلغ المدفوع وعليه فإن الخرج يكون على الشكل التالي :
1 1 1 0 3
في المثال الثاني سعيد لا يملك المال الكافي ليدفع مبلغ 535 وبالتالي فإن البرنامج عليه أن يطبع الخرج -1 ليدل على أن سعيد بساطة لا يملك حق شحاطة.
-1

*/
#include <fstream>
#include <string>
using namespace std;
int nums[4];
int num_need[4]={0,0,0,0};
int money;
int orginalmoney;
void minus(int number,int index)
{
	if (money>=number)
	{
		int n=money/number;
		if (n>nums[index])
			n=nums[index];
		num_need[index]+=n;
		money-=number*n;

	}
}
int main()
{
	ifstream fin("change.in");
	ofstream fout("change.out");
	fin>>nums[0]>>nums[1]>>nums[2]>>nums[3];
	fin>>money;
	orginalmoney=money;
	minus(50,3);
	minus(20,2);
	minus(10,1);
	minus(5,0);
	if (money>0)
	{
		if (nums[2]-num_need[2]>=3)
		{
			num_need[0]=num_need[1]=num_need[2]=num_need[3]=0;
			money=orginalmoney;
			minus(50,3);
			money+=50;
			--num_need[3];
			minus(20,2);
			minus(10,1);
			minus(5,0);
		}
	}
	if (money>0)
		fout<<-1<<endl;
	else
		fout<<num_need[0]<<" "<<num_need[1]<<" "<<num_need[2]<<" "<<num_need[3]<<" "<<num_need[0]+num_need[1]+num_need[2]+num_need[3]<<endl;
	return 0;
}
